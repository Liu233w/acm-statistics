// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/api/crawlers/swagger.json swagger should match snapshot 1`] = `
Object {
  "definitions": Object {
    "CrawlerMeta": Object {
      "description": "Crawler's metadata",
      "properties": Object {
        "description": Object {
          "description": "Description of the crawler",
          "type": "string",
        },
        "title": Object {
          "description": "Title of the crawler",
          "type": "string",
        },
        "url": Object {
          "description": "Target website of the crawler",
          "type": "string",
        },
      },
      "type": "object",
    },
    "Error": Object {
      "properties": Object {
        "error": Object {
          "description": "true",
          "type": "boolean",
        },
        "message": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "Ok": Object {
      "properties": Object {
        "data": Object {
          "$ref": "#/definitions/UserState",
        },
        "error": Object {
          "description": "false",
          "type": "boolean",
        },
      },
      "type": "object",
    },
    "UserState": Object {
      "description": "User performance",
      "properties": Object {
        "solved": Object {
          "format": "int64",
          "type": "integer",
        },
        "solvedList": Object {
          "description": "A list which contains the problem the user passes. For non-virtual judge, only problem id is included. If the crawler targets a virtual judge, each problem follows the format of \`crawlerName-problemId\`",
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "submissions": Object {
          "format": "int64",
          "type": "integer",
        },
        "submissionsByCrawlerName": Object {
          "additionalProperties": Object {
            "type": "number",
          },
          "default": null,
          "description": "If the crawler is virtual_judge, this field contains its submission count divided by crawler name.",
          "type": "object",
        },
      },
      "type": "object",
    },
  },
  "externalDocs": Object {
    "description": "Other documents",
    "url": "https://github.com/Liu233w/acm-statistics/blob/master/crawler-api-backend/README.md",
  },
  "info": Object {
    "description": "A crawler microservice that allows users to invoke all crawlers supported by the website. All crawlers run on server.",
    "title": "crawler-api-backend",
    "version": "1.0.0",
  },
  "paths": Object {
    "/api/crawlers/": Object {
      "get": Object {
        "consumes": Array [
          "application/json",
        ],
        "description": "",
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "success",
            "schema": Object {
              "properties": Object {
                "data": Object {
                  "additionalProperties": Object {
                    "$ref": "#/definitions/CrawlerMeta",
                  },
                  "description": "name of the crawler",
                  "type": "object",
                },
                "error": Object {
                  "description": "false",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          },
        },
        "summary": "Return all supported OJs",
      },
    },
    "/api/crawlers/{type}/{username}": Object {
      "get": Object {
        "consumes": Array [
          "application/json",
        ],
        "parameters": Array [
          Object {
            "description": "Type of the OJ. Only the type defined in \`/crawler/config.yml\` are included.",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string",
          },
          Object {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string",
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful",
            "schema": Object {
              "$ref": "#/definitions/Ok",
            },
          },
          "400": Object {
            "description": "all other failures",
            "schema": Object {
              "$ref": "#/definitions/Error",
            },
          },
        },
        "summary": "Query the performance of a user on certain OJ",
      },
    },
  },
  "swagger": "2.0",
}
`;
